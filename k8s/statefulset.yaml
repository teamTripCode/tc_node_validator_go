apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: validator-node
  namespace: dpos-network
  labels:
    app: validator-node
    version: v1.0.0
spec:
  serviceName: validator-node
  replicas: 3
  selector:
    matchLabels:
      app: validator-node
  template:
    metadata:
      labels:
        app: validator-node
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
      - name: validator-node
        image: foultrip/validator-node:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: p2p
          protocol: TCP
        - containerPort: 3002
          name: api
          protocol: TCP
        - containerPort: 3003
          name: mcp
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 9091
          name: mcp-metrics
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: DATA_DIR
          value: "/app/data"
        - name: LOG_DIR
          value: "/app/logs"
        - name: CONFIG_DIR
          value: "/app/config"
        - name: P2P_PORT
          value: "3001"
        - name: API_PORT
          value: "3002"
        - name: MCP_PORT
          value: "3003"
        - name: METRICS_PORT
          value: "9090"
        - name: MCP_METRICS_PORT
          value: "9091"
        - name: MCP_LOG_LEVEL
          value: "INFO"
        - name: MCP_CONFIG_PATH
          value: "/etc/tripcodechain/mcp/config.json"
        envFrom:
        - configMapRef:
            name: validator-node-config
        - secretRef:
            name: validator-node-secrets
        volumeMounts:
        - name: blockchain-data
          mountPath: /app/data
          subPath: data
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /app/tmp
        - name: mcp-config-volume
          mountPath: /etc/tripcodechain/mcp
          readOnly: true
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 5
        startupProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 20
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "4Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: mcp-config-volume
        configMap:
          name: mcp-config
          defaultMode: 0644
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
  volumeClaimTemplates:
  - metadata:
      name: blockchain-data
      labels:
        app: validator-node
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 50Gi
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
